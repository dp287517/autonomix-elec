Descriptif global de l’application Autonomix Elec
Autonomix Elec est une application web conçue pour gérer des tableaux électriques, permettant aux utilisateurs de créer, visualiser, modifier, et supprimer des tableaux, ainsi que de gérer les disjoncteurs associés. L’application est composée d’un frontend basé sur HTML, CSS, et JavaScript, et d’un backend Node.js avec Express qui expose une API RESTful. Une base de données (non explicitement définie dans les échanges, mais probablement JSON ou MongoDB) stocke les données des tableaux et des disjoncteurs. L’intégration avec OpenAI permet de rechercher des caractéristiques de disjoncteurs à partir de leur marque et référence.

Voici une vue d’ensemble du fonctionnement, divisée en sections : architecture, technologies, frontend, backend, flux de données, fonctionnalités, et points d’attention.

1. Architecture de l’application
L’application suit une architecture client-serveur classique, avec une séparation claire entre le frontend (interface utilisateur) et le backend (logique serveur et gestion des données). Voici les composants principaux :

Frontend :
Une application web monopage (SPA-like) composée de fichiers HTML statiques (index.html, create.html, view.html, edit.html) servis par le serveur Express.
Les interactions utilisateur (création, modification, suppression) sont gérées via JavaScript, avec des appels API asynchrones (fetch) vers le backend.
L’interface utilise Tailwind CSS pour le style et des pop-ups modaux pour les confirmations.
Backend :
Un serveur Node.js avec le framework Express qui expose une API RESTful.
Les endpoints gèrent les opérations CRUD (Create, Read, Update, Delete) pour les tableaux et disjoncteurs, ainsi qu’une intégration avec OpenAI pour la recherche de disjoncteurs.
Les données sont probablement stockées dans un fichier JSON ou une base de données MongoDB (non précisé, mais typique pour ce type d’application).
Base de données :
Hypothèse : un fichier JSON (data.json) ou une base MongoDB avec des collections pour les tableaux et les disjoncteurs.
Structure des données :
Tableaux : { id: string, disjoncteurs: array }
Disjoncteurs : { id: string, marque: string, ref: string, isPrincipal: boolean, linkedTableauId: string, ... }
API externe :
Intégration avec l’API OpenAI pour récupérer les caractéristiques techniques des disjoncteurs à partir de leur marque et référence.
Serveur :
Le serveur Express est hébergé localement (http://localhost:3000) et sert à la fois les fichiers statiques du frontend et l’API RESTful.
Les requêtes HTTP entre le frontend et le backend transitent via ce serveur.
2. Technologies utilisées
Frontend :
HTML5 : Structure des pages (index.html, create.html, view.html, edit.html).
CSS :
Tailwind CSS (v2.2.19) : Framework utilitaire pour le style (classes comme bg-blue-600, flex, hidden).
styles.css : Styles personnalisés pour la police, les tables, et les disjoncteurs principaux.
JavaScript (vanilla) : Logique client pour les interactions, appels API, et manipulation du DOM.
Fetch API : Pour les requêtes HTTP asynchrones vers le backend.
Backend :
Node.js : Environnement d’exécution JavaScript côté serveur.
Express : Framework web pour gérer les routes et les requêtes HTTP.
OpenAI API : Utilisée pour enrichir les données des disjoncteurs.
Base de données (hypothèse) :
Fichier JSON ou MongoDB pour stocker les tableaux et disjoncteurs.
Serveur local :
Hébergement via npm start sur http://localhost:3000.
3. Frontend : Structure et pages
Le frontend est composé de quatre pages HTML principales, chacune avec un objectif spécifique :

a. index.html (Accueil)
Rôle : Page d’entrée de l’application, servant de tableau de bord.
Fonctionnalités :
Navigation vers les autres pages via un menu (Créer un tableau, Voir les tableaux).
Probablement un aperçu ou une description de l’application (non détaillé dans les échanges).
Interface : Simple, avec une navigation fixe en haut (nav).
b. create.html (Créer un tableau)
Rôle : Permet de créer un nouveau tableau électrique avec des disjoncteurs.
Fonctionnalités :
Saisie de l’identifiant unique du tableau.
Ajout de disjoncteurs via :
Recherche OpenAI (marque et référence).
Sélection d’un disjoncteur existant (liste déroulante).
Saisie manuelle des caractéristiques (ID, marque, référence, type, pôles, etc.).
Validation des données (ID unique, marque/référence obligatoires, courbe B/C/D, etc.).
Enregistrement du tableau via un appel API POST à /api/tableaux.
Interface :
Formulaire pour l’identifiant du tableau.
Section pour ajouter des disjoncteurs avec un formulaire détaillé.
Boutons pour rechercher, ajouter manuellement, ou sélectionner un disjoncteur existant.
Table affichant les disjoncteurs ajoutés temporairement.
c. view.html (Voir les tableaux)
Rôle : Affiche la liste des tableaux existants et permet d’accéder à leurs détails.
Fonctionnalités :
Liste tous les tableaux via un appel API GET à /api/tableaux/ids.
Pour chaque tableau :
Affiche les disjoncteurs associés (via GET /api/tableaux/:id).
Permet de modifier ou supprimer un tableau.
Redirection vers edit.html pour la modification.
Interface :
Table ou liste des tableaux avec des boutons pour modifier ou supprimer.
Détails des disjoncteurs dans une table (ID, marque, référence, principal, liaison).
d. edit.html (Modifier un tableau)
Rôle : Permet de modifier un tableau existant et ses disjoncteurs.
Fonctionnalités :
Charge les données du tableau via GET /api/tableaux/:id.
Affiche les disjoncteurs dans une table avec :
ID, marque, référence, statut principal, liaison (tableau aval).
Actions : modifier, supprimer, transférer, désigner comme principal.
Modification des disjoncteurs via un formulaire avec :
Saisie des caractéristiques (ID, marque, référence, etc.).
Champ <select> pour associer un tableau aval (linkedTableauId) pour les disjoncteurs non principaux.
Désactivation du champ pour les disjoncteurs principaux.
Ajout de nouveaux disjoncteurs (comme dans create.html).
Transfert d’un disjoncteur vers un autre tableau.
Enregistrement des modifications via PUT /api/tableaux/:id.
Interface :
Affiche l’identifiant du tableau (lecture seule).
Table des disjoncteurs avec boutons d’action.
Formulaire détaillé pour ajouter/modifier des disjoncteurs, incluant le champ "Tableau aval".
4. Backend : API RESTful
Le backend Express expose une API RESTful pour gérer les tableaux et disjoncteurs. Voici les endpoints probables (dérivés des appels dans edit.html) :

GET /api/tableaux/ids :
Retourne la liste des identifiants de tous les tableaux.
Utilisé pour remplir les listes déroulantes (transfert, liaison).
GET /api/tableaux/:id :
Retourne les détails d’un tableau (ID, disjoncteurs).
Utilisé pour charger les données dans view.html et edit.html.
POST /api/tableaux :
Crée un nouveau tableau avec ses disjoncteurs.
Utilisé dans create.html.
PUT /api/tableaux/:id :
Met à jour un tableau existant (incluant ses disjoncteurs).
Utilisé dans edit.html pour enregistrer les modifications.
DELETE /api/tableaux/:id (hypothèse) :
Supprime un tableau.
Utilisé dans view.html.
GET /api/disjoncteurs :
Retourne une liste de disjoncteurs existants (pour la liste déroulante).
Utilisé dans create.html et edit.html.
POST /api/disjoncteur :
Envoie une requête à l’API OpenAI pour récupérer les caractéristiques d’un disjoncteur à partir de sa marque et référence.
Utilisé dans la recherche OpenAI.
Flux backend :

Le serveur reçoit une requête HTTP.
Pour les opérations CRUD, il lit/écrit dans la base de données (JSON/MongoDB).
Pour la recherche OpenAI, il envoie une requête à l’API OpenAI et retourne les résultats.
Les réponses sont formatées en JSON et renvoyées au frontend.
5. Flux de données
Voici un exemple de flux pour une opération typique (modifier un tableau dans edit.html) :

Chargement initial :
L’utilisateur accède à edit.html?id=05-9-G.
JavaScript exécute window.onload, appelant :
chargerTableau() : GET /api/tableaux/05-9-G pour charger le tableau et ses disjoncteurs.
chargerDisjoncteursExistants() : GET /api/disjoncteurs pour remplir la liste déroulante.
chargerTableaux() : GET /api/tableaux/ids pour remplir le champ "Tableau aval".
Les disjoncteurs sont affichés dans une table via afficherDisjoncteurs().
Modification d’un disjoncteur :
L’utilisateur clique sur "Modifier" pour 50Q2.
modifierDisjoncteur(index) remplit le formulaire avec les données du disjoncteur et active le champ <select id="disjoncteur-linked-tableau">.
L’utilisateur sélectionne un tableau aval (ex. 02-9-G) et clique sur "Modifier le disjoncteur".
ajouterDisjoncteur() valide les données et met à jour l’objet disjoncteurs en mémoire.
Enregistrement :
L’utilisateur clique sur "Enregistrer les modifications".
enregistrerModifications() envoie un PUT /api/tableaux/05-9-G avec les disjoncteurs mis à jour.
Le serveur sauvegarde les données et retourne une confirmation.
L’utilisateur est redirigé vers view.html.
Recherche OpenAI :
L’utilisateur entre une marque et une référence, clique sur "Rechercher via OpenAI".
rechercherDisjoncteur() envoie un POST /api/disjoncteur au serveur, qui appelle l’API OpenAI.
Les caractéristiques sont retournées et remplissent le formulaire.
6. Fonctionnalités principales
Gestion des tableaux :
Création, visualisation, modification, suppression.
Identifiant unique par tableau.
Gestion des disjoncteurs :
Ajout via recherche OpenAI, sélection existante, ou saisie manuelle.
Modification des caractéristiques (ID, marque, référence, type, pôles, etc.).
Désignation d’un disjoncteur comme principal (un seul par tableau).
Liaison d’un disjoncteur non principal à un tableau aval via un champ <select>.
Transfert d’un disjoncteur vers un autre tableau.
Suppression de disjoncteurs.
Validation des données :
ID unique obligatoire.
Marque et référence obligatoires.
Courbe limitée à B, C, D.
Ir doit être numérique (ex. 60 A).
Recherche OpenAI :
Récupération automatique des caractéristiques des disjoncteurs.
Interface utilisateur :
Tables pour afficher les disjoncteurs avec mise en évidence des conflits d’ID (rouge) et des principaux (jaune).
Pop-ups pour confirmer les actions critiques (suppression, transfert, principal).
Formulaire détaillé pour les caractéristiques des disjoncteurs.